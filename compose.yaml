version: '3.8'

services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: server
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: development
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: ptu_learning
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AI_URL: http://ai:5000
    dns:
      - 8.8.8.8
      - 1.1.1.1
    networks:
      - app-network
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      ai:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: pnpm start:dev

  ai:
    build:
      context: ./data_ai_tejarati
      dockerfile: Dockerfile
    container_name: ai
    ports:
      - '5000:5000'
    networks:
      - app-network
    volumes:
      - ./data_ai_tejarati:/app
    environment:
      - FLASK_ENV=development
    depends_on:
      - db

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=elastic
      - xpack.security.enabled=false
    ports:
      - '9200:9200'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9200']
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:15
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ptu_learning
    ports:
      - '5432:5432'
    networks:
      - app-network
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
    driver: local
