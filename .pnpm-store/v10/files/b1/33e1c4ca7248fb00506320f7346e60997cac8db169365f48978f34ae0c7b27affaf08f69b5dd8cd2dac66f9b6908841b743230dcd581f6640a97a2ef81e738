{
  "version": 3,
  "sources": ["../../src/entities/security-scheme.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\nimport {\n  oasSecurityRequirementSchema,\n  pkceOptions,\n  securityApiKeySchema,\n  securityHttpSchema,\n  securityOauthSchema,\n  securityOpenIdSchema,\n  securitySchemeSchema,\n} from './security-scheme'\n\ndescribe('Security Schemas', () => {\n  describe('API Key Schema', () => {\n    it('should validate a valid API key schema', () => {\n      const apiKey = {\n        type: 'apiKey',\n        name: 'api_key',\n        in: 'header',\n        description: 'API Key Authentication',\n        uid: 'apikey123',\n        nameKey: 'x-api-key',\n        value: 'test-api-key',\n      }\n\n      const result = securityApiKeySchema.safeParse(apiKey)\n      expect(result.success).toBe(true)\n    })\n\n    it('should apply default values', () => {\n      const minimalApiKey = {\n        type: 'apiKey',\n        uid: 'apikey123',\n      }\n\n      const result = securityApiKeySchema.parse(minimalApiKey)\n      expect(result).toEqual({\n        type: 'apiKey',\n        uid: 'apikey123',\n        name: '',\n        in: 'header',\n        nameKey: '',\n        value: '',\n      })\n    })\n  })\n\n  describe('HTTP Schema', () => {\n    it('should validate a valid HTTP basic schema', () => {\n      const httpBasic = {\n        type: 'http',\n        scheme: 'basic',\n        description: 'Basic HTTP Authentication',\n        uid: 'http123',\n        username: 'user',\n        password: 'pass',\n      }\n\n      const result = securityHttpSchema.safeParse(httpBasic)\n      expect(result.success).toBe(true)\n    })\n\n    it('should validate a valid HTTP bearer schema', () => {\n      const httpBearer = {\n        type: 'http',\n        scheme: 'bearer',\n        bearerFormat: 'JWT',\n        description: 'Bearer Authentication',\n        uid: 'http456',\n        token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9',\n      }\n\n      const result = securityHttpSchema.safeParse(httpBearer)\n      expect(result.success).toBe(true)\n    })\n\n    it('should apply default values', () => {\n      const minimalHttp = {\n        type: 'http',\n        uid: 'http123',\n      }\n\n      const result = securityHttpSchema.parse(minimalHttp)\n      expect(result).toEqual({\n        type: 'http',\n        uid: 'http123',\n        scheme: 'basic',\n        bearerFormat: 'JWT',\n        nameKey: '',\n        username: '',\n        password: '',\n        token: '',\n      })\n    })\n\n    it('should reject invalid scheme values', () => {\n      const invalidHttp = {\n        type: 'http',\n        scheme: 'digest',\n        uid: 'http123',\n      }\n\n      const result = securityHttpSchema.safeParse(invalidHttp)\n      expect(result.success).toBe(false)\n    })\n  })\n\n  describe('OpenID Connect Schema', () => {\n    it('should validate a valid OpenID schema', () => {\n      const openId = {\n        type: 'openIdConnect',\n        openIdConnectUrl: 'https://example.com/.well-known/openid-configuration',\n        description: 'OpenID Connect',\n        uid: 'openid123',\n        nameKey: 'openid',\n      }\n\n      const result = securityOpenIdSchema.safeParse(openId)\n      expect(result.success).toBe(true)\n    })\n\n    it('should apply default values', () => {\n      const minimalOpenId = {\n        type: 'openIdConnect',\n        uid: 'openid123',\n      }\n\n      const result = securityOpenIdSchema.parse(minimalOpenId)\n      expect(result).toEqual({\n        type: 'openIdConnect',\n        uid: 'openid123',\n        openIdConnectUrl: '',\n        nameKey: '',\n      })\n    })\n  })\n\n  describe('OAuth2 Schema', () => {\n    it('should validate a valid OAuth2 implicit flow schema', () => {\n      const oauth2Implicit = {\n        type: 'oauth2',\n        description: 'OAuth2 Implicit Flow',\n        uid: 'oauth123',\n        flows: {\n          implicit: {\n            type: 'implicit',\n            authorizationUrl: 'https://example.com/oauth/authorize',\n            scopes: {\n              'read:api': 'Read access',\n              'write:api': 'Write access',\n            },\n            selectedScopes: ['read:api'],\n            token: 'access-token-123',\n          },\n        },\n      }\n\n      const result = securityOauthSchema.safeParse(oauth2Implicit)\n      expect(result.success).toBe(true)\n    })\n\n    it('should validate a valid OAuth2 with missing scopes', () => {\n      const oauth2Implicit = {\n        type: 'oauth2',\n        description: 'OAuth2 Implicit Flow',\n        uid: 'oauth123',\n        flows: {\n          implicit: {\n            type: 'implicit',\n            authorizationUrl: 'https://example.com/oauth/authorize',\n            scopes: null,\n            selectedScopes: ['read:api'],\n            token: 'access-token-123',\n          },\n        },\n      }\n\n      const result = securityOauthSchema.safeParse(oauth2Implicit)\n      expect(result.success).toBe(true)\n    })\n\n    it('should validate a valid OAuth2 authorization code flow schema', () => {\n      const oauth2AuthCode = {\n        type: 'oauth2',\n        description: 'OAuth2 Authorization Code Flow',\n        uid: 'oauth456',\n        flows: {\n          authorizationCode: {\n            type: 'authorizationCode',\n            authorizationUrl: 'https://example.com/oauth/authorize',\n            tokenUrl: 'https://example.com/oauth/token',\n            'x-usePkce': 'SHA-256',\n            scopes: {\n              'read:api': 'Read access',\n              'write:api': 'Write access',\n            },\n            clientSecret: 'client-secret',\n            token: 'access-token-456',\n            'x-scalar-security-query': {\n              prompt: 'consent',\n            },\n          },\n        },\n      }\n\n      const result = securityOauthSchema.safeParse(oauth2AuthCode)\n      expect(result.success).toBe(true)\n    })\n\n    it('should validate a valid OAuth2 client credentials flow schema', () => {\n      const oauth2ClientCreds = {\n        type: 'oauth2',\n        description: 'OAuth2 Client Credentials Flow',\n        uid: 'oauth789',\n        flows: {\n          clientCredentials: {\n            type: 'clientCredentials',\n            tokenUrl: 'https://example.com/oauth/token',\n            scopes: {},\n            clientSecret: 'client-secret',\n            token: 'access-token-789',\n          },\n        },\n      }\n\n      const result = securityOauthSchema.safeParse(oauth2ClientCreds)\n      expect(result.success).toBe(true)\n    })\n\n    it('should validate a valid OAuth2 password flow schema', () => {\n      const oauth2Password = {\n        type: 'oauth2',\n        description: 'OAuth2 Password Flow',\n        uid: 'oauth101',\n        flows: {\n          password: {\n            type: 'password',\n            tokenUrl: 'https://example.com/oauth/token',\n            scopes: {},\n            username: 'testuser',\n            password: 'testpass',\n            clientSecret: 'client-secret',\n            token: 'access-token-101',\n            'x-scalar-security-query': {\n              prompt: 'consent',\n              audience: 'scalar',\n            },\n          },\n        },\n      }\n\n      const result = securityOauthSchema.safeParse(oauth2Password)\n      expect(result.success).toBe(true)\n    })\n\n    it('should apply default values', () => {\n      const minimalOauth2 = {\n        type: 'oauth2',\n        uid: 'oauth123',\n      }\n\n      const result = securityOauthSchema.parse(minimalOauth2)\n      expect(result.flows.implicit).toBeDefined()\n      expect(result.flows.implicit?.authorizationUrl).toBe('http://localhost:8080')\n      expect(result.flows.implicit?.scopes).toEqual({})\n      expect(result.flows.implicit?.selectedScopes).toEqual([])\n      expect(result.flows.implicit?.token).toBe('')\n      expect(result.nameKey).toBe('')\n    })\n\n    it('should validate PKCE options', () => {\n      expect(pkceOptions).toContain('SHA-256')\n      expect(pkceOptions).toContain('plain')\n      expect(pkceOptions).toContain('no')\n    })\n\n    it('should apply x-default-scopes', () => {\n      const oauth2 = {\n        type: 'oauth2',\n        uid: 'oauth123',\n        'x-default-scopes': ['read:api', 'write:api'],\n      }\n\n      const result = securitySchemeSchema.parse(oauth2)\n      if (result.type !== 'oauth2') {\n        throw new Error('Expected oauth2 schema')\n      }\n      expect(result['x-default-scopes']).toEqual(['read:api', 'write:api'])\n      expect(result.flows.implicit?.selectedScopes).toEqual(['read:api', 'write:api'])\n    })\n  })\n\n  describe('Security Requirement Schema', () => {\n    it('should validate a valid security requirement', () => {\n      const securityRequirement = {\n        'api_key': [],\n        'oauth2': ['read:api', 'write:api'],\n      }\n\n      const result = oasSecurityRequirementSchema.safeParse(securityRequirement)\n      expect(result.success).toBe(true)\n    })\n\n    it('should apply default values for empty scopes', () => {\n      const securityRequirement = {\n        'api_key': undefined,\n      }\n\n      const result = oasSecurityRequirementSchema.parse(securityRequirement)\n      expect(result).toEqual({\n        'api_key': [],\n      })\n    })\n  })\n\n  describe('Combined Security Scheme', () => {\n    it('should validate all security scheme types', () => {\n      const apiKey = {\n        type: 'apiKey',\n        name: 'api_key',\n        in: 'header',\n        uid: 'apikey123',\n        value: 'test-api-key',\n      }\n\n      const http = {\n        type: 'http',\n        scheme: 'bearer',\n        uid: 'http123',\n        token: 'bearer-token',\n      }\n\n      const openId = {\n        type: 'openIdConnect',\n        openIdConnectUrl: 'https://example.com/.well-known/openid-configuration',\n        uid: 'openid123',\n      }\n\n      const oauth2 = {\n        type: 'oauth2',\n        uid: 'oauth123',\n        flows: {\n          implicit: {\n            type: 'implicit',\n            authorizationUrl: 'https://example.com/oauth/authorize',\n            scopes: {},\n            token: '',\n          },\n        },\n      }\n\n      expect(securitySchemeSchema.safeParse(apiKey).success).toBe(true)\n      expect(securitySchemeSchema.safeParse(http).success).toBe(true)\n      expect(securitySchemeSchema.safeParse(openId).success).toBe(true)\n      expect(securitySchemeSchema.safeParse(oauth2).success).toBe(true)\n    })\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
