{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/compliance/callback-object.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\n\nimport { CallbackObjectSchema } from '../unprocessed/callback-object'\n\ndescribe('callback-object', () => {\n  describe('CallbackObjectSchema', () => {\n    // https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#callback-object-example\n    describe('Callback Object Example', () => {\n      it('The following example uses the user provided queryUrl query string parameter to define the callback URL.', () => {\n        const result = CallbackObjectSchema.parse({\n          '{$request.query.queryUrl}': {\n            post: {\n              requestBody: {\n                description: 'Callback payload',\n                content: {\n                  'application/json': {\n                    schema: {\n                      $ref: '#/components/schemas/SomePayload',\n                    },\n                  },\n                },\n              },\n              responses: {\n                '200': {\n                  description: 'callback successfully processed',\n                },\n              },\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          '{$request.query.queryUrl}': {\n            post: {\n              requestBody: {\n                description: 'Callback payload',\n                content: {\n                  'application/json': {\n                    schema: {\n                      $ref: '#/components/schemas/SomePayload',\n                    },\n                  },\n                },\n              },\n              responses: {\n                '200': {\n                  description: 'callback successfully processed',\n                },\n              },\n            },\n          },\n        })\n      })\n\n      it('The following example shows a callback where the server is hard-coded, but the query string parameters are populated from the id and email property in the request body.', () => {\n        const result = CallbackObjectSchema.parse({\n          'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}': {\n            post: {\n              requestBody: {\n                description: 'Callback payload',\n                content: {\n                  'application/json': {\n                    schema: {\n                      $ref: '#/components/schemas/SomePayload',\n                    },\n                  },\n                },\n              },\n              responses: {\n                '200': {\n                  description: 'callback successfully processed',\n                },\n              },\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          'http://notificationServer.com?transactionId={$request.body#/id}&email={$request.body#/email}': {\n            post: {\n              requestBody: {\n                description: 'Callback payload',\n                content: {\n                  'application/json': {\n                    schema: {\n                      $ref: '#/components/schemas/SomePayload',\n                    },\n                  },\n                },\n              },\n              responses: {\n                '200': {\n                  description: 'callback successfully processed',\n                },\n              },\n            },\n          },\n        })\n      })\n    })\n  })\n})\n"],
  "mappings": "AAAA,SAAS,UAAU,QAAQ,UAAU;AAErC,SAAS,4BAA4B;AAErC,SAAS,mBAAmB,MAAM;AAChC,WAAS,wBAAwB,MAAM;AAErC,aAAS,2BAA2B,MAAM;AACxC,SAAG,4GAA4G,MAAM;AACnH,cAAM,SAAS,qBAAqB,MAAM;AAAA,UACxC,6BAA6B;AAAA,YAC3B,MAAM;AAAA,cACJ,aAAa;AAAA,gBACX,aAAa;AAAA,gBACb,SAAS;AAAA,kBACP,oBAAoB;AAAA,oBAClB,QAAQ;AAAA,sBACN,MAAM;AAAA,oBACR;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,WAAW;AAAA,gBACT,OAAO;AAAA,kBACL,aAAa;AAAA,gBACf;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAED,eAAO,MAAM,EAAE,QAAQ;AAAA,UACrB,6BAA6B;AAAA,YAC3B,MAAM;AAAA,cACJ,aAAa;AAAA,gBACX,aAAa;AAAA,gBACb,SAAS;AAAA,kBACP,oBAAoB;AAAA,oBAClB,QAAQ;AAAA,sBACN,MAAM;AAAA,oBACR;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,WAAW;AAAA,gBACT,OAAO;AAAA,kBACL,aAAa;AAAA,gBACf;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAED,SAAG,4KAA4K,MAAM;AACnL,cAAM,SAAS,qBAAqB,MAAM;AAAA,UACxC,gGAAgG;AAAA,YAC9F,MAAM;AAAA,cACJ,aAAa;AAAA,gBACX,aAAa;AAAA,gBACb,SAAS;AAAA,kBACP,oBAAoB;AAAA,oBAClB,QAAQ;AAAA,sBACN,MAAM;AAAA,oBACR;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,WAAW;AAAA,gBACT,OAAO;AAAA,kBACL,aAAa;AAAA,gBACf;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAED,eAAO,MAAM,EAAE,QAAQ;AAAA,UACrB,gGAAgG;AAAA,YAC9F,MAAM;AAAA,cACJ,aAAa;AAAA,gBACX,aAAa;AAAA,gBACb,SAAS;AAAA,kBACP,oBAAoB;AAAA,oBAClB,QAAQ;AAAA,sBACN,MAAM;AAAA,oBACR;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,WAAW;AAAA,gBACT,OAAO;AAAA,kBACL,aAAa;AAAA,gBACf;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
