{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/compliance/openapi-object.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\n\nimport { OpenApiObjectSchema } from '../unprocessed/openapi-object'\n\ndescribe('openapi-object', () => {\n  describe('OpenApiObject', () => {\n    // https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#server-object-example\n    describe('Server Object Example', () => {\n      it(`The following shows how multiple servers can be described, for example, at the OpenAPI Object's servers`, () => {\n        const result = OpenApiObjectSchema.parse({\n          openapi: '3.1.1',\n          info: {\n            title: 'Example',\n            version: '1.0.0',\n          },\n          servers: [\n            {\n              url: 'https://development.gigantic-server.com/v1',\n              description: 'Development server',\n            },\n            {\n              url: 'https://staging.gigantic-server.com/v1',\n              description: 'Staging server',\n            },\n            {\n              url: 'https://api.gigantic-server.com/v1',\n              description: 'Production server',\n            },\n          ],\n        })\n\n        expect(result).toEqual({\n          openapi: '3.1.1',\n          info: {\n            title: 'Example',\n            version: '1.0.0',\n          },\n          servers: [\n            {\n              url: 'https://development.gigantic-server.com/v1',\n              description: 'Development server',\n            },\n            {\n              url: 'https://staging.gigantic-server.com/v1',\n              description: 'Staging server',\n            },\n            {\n              url: 'https://api.gigantic-server.com/v1',\n              description: 'Production server',\n            },\n          ],\n        })\n      })\n    })\n\n    it('The following shows how variables can be used for a server configuration', () => {\n      const result = OpenApiObjectSchema.parse({\n        openapi: '3.1.1',\n        info: {\n          title: 'Example',\n          version: '1.0.0',\n        },\n        servers: [\n          {\n            'url': 'https://{username}.gigantic-server.com:{port}/{basePath}',\n            'description': 'The production API server',\n            'variables': {\n              'username': {\n                'default': 'demo',\n                'description': 'A user-specific subdomain. Use `demo` for a free sandbox environment.',\n              },\n              port: {\n                enum: ['8443', '443'],\n                default: '8443',\n              },\n              'basePath': {\n                'default': 'v2',\n              },\n            },\n          },\n        ],\n      })\n\n      expect(result).toEqual({\n        openapi: '3.1.1',\n        info: {\n          title: 'Example',\n          version: '1.0.0',\n        },\n        servers: [\n          {\n            url: 'https://{username}.gigantic-server.com:{port}/{basePath}',\n            description: 'The production API server',\n            variables: {\n              username: {\n                default: 'demo',\n                description: 'A user-specific subdomain. Use `demo` for a free sandbox environment.',\n              },\n              port: {\n                enum: ['8443', '443'],\n                default: '8443',\n              },\n              basePath: {\n                default: 'v2',\n              },\n            },\n          },\n        ],\n      })\n    })\n\n    // https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#components-object-example\n    it('Components Object Example', () => {\n      const result = OpenApiObjectSchema.parse({\n        openapi: '3.1.1',\n        info: {\n          title: 'Example',\n          version: '1.0.0',\n        },\n        components: {\n          schemas: {\n            GeneralError: {\n              type: 'object',\n              properties: {\n                code: {\n                  type: 'integer',\n                  format: 'int32',\n                },\n                message: {\n                  type: 'string',\n                },\n              },\n            },\n            Category: {\n              type: 'object',\n              properties: {\n                id: {\n                  type: 'integer',\n                  format: 'int64',\n                },\n                name: {\n                  type: 'string',\n                },\n              },\n            },\n            Tag: {\n              type: 'object',\n              properties: {\n                id: {\n                  type: 'integer',\n                  format: 'int64',\n                },\n                name: {\n                  type: 'string',\n                },\n              },\n            },\n          },\n          parameters: {\n            skipParam: {\n              name: 'skip',\n              in: 'query',\n              description: 'number of items to skip',\n              required: true,\n              schema: {\n                type: 'integer',\n                format: 'int32',\n              },\n            },\n            limitParam: {\n              name: 'limit',\n              in: 'query',\n              description: 'max records to return',\n              required: true,\n              schema: {\n                type: 'integer',\n                format: 'int32',\n              },\n            },\n          },\n          responses: {\n            NotFound: {\n              description: 'Entity not found.',\n            },\n            IllegalInput: {\n              description: 'Illegal input for operation.',\n            },\n            GeneralError: {\n              description: 'General Error',\n              content: {\n                'application/json': {\n                  schema: {\n                    $ref: '#/components/schemas/GeneralError',\n                  },\n                },\n              },\n            },\n          },\n          securitySchemes: {\n            api_key: {\n              type: 'apiKey',\n              name: 'api-key',\n              in: 'header',\n            },\n            petstore_auth: {\n              type: 'oauth2',\n              flows: {\n                implicit: {\n                  authorizationUrl: 'https://example.org/api/oauth/dialog',\n                  scopes: {\n                    'write:pets': 'modify pets in your account',\n                    'read:pets': 'read your pets',\n                  },\n                },\n              },\n            },\n          },\n        },\n      })\n\n      expect(result).toEqual({\n        openapi: '3.1.1',\n        info: {\n          title: 'Example',\n          version: '1.0.0',\n        },\n        components: {\n          schemas: {\n            GeneralError: {\n              type: 'object',\n              properties: {\n                code: {\n                  type: 'integer',\n                  format: 'int32',\n                },\n                message: {\n                  type: 'string',\n                },\n              },\n            },\n            Category: {\n              type: 'object',\n              properties: {\n                id: {\n                  type: 'integer',\n                  format: 'int64',\n                },\n                name: {\n                  type: 'string',\n                },\n              },\n            },\n            Tag: {\n              type: 'object',\n              properties: {\n                id: {\n                  type: 'integer',\n                  format: 'int64',\n                },\n                name: {\n                  type: 'string',\n                },\n              },\n            },\n          },\n          parameters: {\n            skipParam: {\n              name: 'skip',\n              in: 'query',\n              description: 'number of items to skip',\n              required: true,\n              schema: {\n                type: 'integer',\n                format: 'int32',\n              },\n            },\n            limitParam: {\n              name: 'limit',\n              in: 'query',\n              description: 'max records to return',\n              required: true,\n              schema: {\n                type: 'integer',\n                format: 'int32',\n              },\n            },\n          },\n          responses: {\n            NotFound: {\n              description: 'Entity not found.',\n            },\n            IllegalInput: {\n              description: 'Illegal input for operation.',\n            },\n            GeneralError: {\n              description: 'General Error',\n              content: {\n                'application/json': {\n                  schema: {\n                    $ref: '#/components/schemas/GeneralError',\n                  },\n                },\n              },\n            },\n          },\n          securitySchemes: {\n            api_key: {\n              type: 'apiKey',\n              name: 'api-key',\n              in: 'header',\n            },\n            petstore_auth: {\n              type: 'oauth2',\n              flows: {\n                implicit: {\n                  authorizationUrl: 'https://example.org/api/oauth/dialog',\n                  scopes: {\n                    'write:pets': 'modify pets in your account',\n                    'read:pets': 'read your pets',\n                  },\n                },\n              },\n            },\n          },\n        },\n      })\n    })\n\n    // https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#paths-object-example\n    it('Paths Object Example', () => {\n      const result = OpenApiObjectSchema.parse({\n        openapi: '3.1.1',\n        info: {\n          title: 'Example',\n          version: '1.0.0',\n        },\n        paths: {\n          '/pets': {\n            get: {\n              description: 'Returns all pets from the system that the user has access to',\n              responses: {\n                200: {\n                  description: 'A list of pets.',\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'array',\n                        items: {\n                          $ref: '#/components/schemas/pet',\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      })\n\n      expect(result).toEqual({\n        openapi: '3.1.1',\n        info: {\n          title: 'Example',\n          version: '1.0.0',\n        },\n        paths: {\n          '/pets': {\n            get: {\n              description: 'Returns all pets from the system that the user has access to',\n              responses: {\n                200: {\n                  description: 'A list of pets.',\n                  content: {\n                    'application/json': {\n                      schema: {\n                        type: 'array',\n                        items: {\n                          $ref: '#/components/schemas/pet',\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      })\n    })\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
