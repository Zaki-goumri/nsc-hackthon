{
  "version": 3,
  "sources": ["../../../src/schemas/extensions/x-scalar-security-query.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\nimport { XScalarSecurityQuery } from './x-scalar-security-query'\n\ndescribe('XScalarSecurityQuery', () => {\n  it('allows any property', () => {\n    const result = XScalarSecurityQuery.parse({\n      'x-scalar-security-query': {\n        prompt: 'consent',\n      },\n    })\n\n    expect(result).toEqual({\n      'x-scalar-security-query': {\n        prompt: 'consent',\n      },\n    })\n  })\n\n  it('allows more than one property', () => {\n    const result = XScalarSecurityQuery.parse({\n      'x-scalar-security-query': {\n        prompt: 'consent',\n        audience: 'scalar',\n      },\n    })\n\n    expect(result).toEqual({\n      'x-scalar-security-query': {\n        prompt: 'consent',\n        audience: 'scalar',\n      },\n    })\n  })\n\n  it('can be empty, not required', () => {\n    const result = XScalarSecurityQuery.parse({})\n\n    expect(result).toEqual({})\n  })\n})\n"],
  "mappings": "AAAA,SAAS,UAAU,QAAQ,UAAU;AACrC,SAAS,4BAA4B;AAErC,SAAS,wBAAwB,MAAM;AACrC,KAAG,uBAAuB,MAAM;AAC9B,UAAM,SAAS,qBAAqB,MAAM;AAAA,MACxC,2BAA2B;AAAA,QACzB,QAAQ;AAAA,MACV;AAAA,IACF,CAAC;AAED,WAAO,MAAM,EAAE,QAAQ;AAAA,MACrB,2BAA2B;AAAA,QACzB,QAAQ;AAAA,MACV;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAED,KAAG,iCAAiC,MAAM;AACxC,UAAM,SAAS,qBAAqB,MAAM;AAAA,MACxC,2BAA2B;AAAA,QACzB,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,IACF,CAAC;AAED,WAAO,MAAM,EAAE,QAAQ;AAAA,MACrB,2BAA2B;AAAA,QACzB,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAED,KAAG,8BAA8B,MAAM;AACrC,UAAM,SAAS,qBAAqB,MAAM,CAAC,CAAC;AAE5C,WAAO,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAA,EAC3B,CAAC;AACH,CAAC;",
  "names": []
}
