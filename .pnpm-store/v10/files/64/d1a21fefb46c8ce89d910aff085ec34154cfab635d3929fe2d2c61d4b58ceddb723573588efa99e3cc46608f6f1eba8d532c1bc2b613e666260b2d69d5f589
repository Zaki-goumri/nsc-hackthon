{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/compliance/schema-object.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\n\nimport { ComponentsObjectSchema } from '../unprocessed/components-object'\nimport { SchemaObjectSchema } from '../unprocessed/schema-object'\n\ndescribe('schema-object', () => {\n  describe('SchemaObjectSchema', () => {\n    // https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#schema-object-example\n    describe('Schema Object Examples', () => {\n      it('Primitive Example', () => {\n        const result = SchemaObjectSchema.parse({\n          type: 'string',\n          format: 'email',\n        })\n\n        expect(result).toEqual({\n          type: 'string',\n          format: 'email',\n        })\n      })\n\n      it('Simple Model', () => {\n        const result = SchemaObjectSchema.parse({\n          type: 'object',\n          required: ['name'],\n          properties: {\n            name: {\n              type: 'string',\n            },\n            address: {\n              $ref: '#/components/schemas/Address',\n            },\n            age: {\n              type: 'integer',\n              format: 'int32',\n              minimum: 0,\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          type: 'object',\n          required: ['name'],\n          properties: {\n            name: {\n              type: 'string',\n            },\n            address: {\n              $ref: '#/components/schemas/Address',\n            },\n            age: {\n              type: 'integer',\n              format: 'int32',\n              minimum: 0,\n            },\n          },\n        })\n      })\n\n      describe('Model with Map/Dictionary Properties', () => {\n        it('For a simple string to string mapping', () => {\n          const result = SchemaObjectSchema.parse({\n            type: 'object',\n            additionalProperties: {\n              type: 'string',\n            },\n          })\n\n          expect(result).toEqual({\n            type: 'object',\n            additionalProperties: {\n              type: 'string',\n            },\n          })\n        })\n\n        it('For a string to model mapping', () => {\n          const result = SchemaObjectSchema.parse({\n            type: 'object',\n            additionalProperties: {\n              $ref: '#/components/schemas/ComplexModel',\n            },\n          })\n\n          expect(result).toEqual({\n            type: 'object',\n            additionalProperties: {\n              $ref: '#/components/schemas/ComplexModel',\n            },\n          })\n        })\n      })\n    })\n\n    it('Model with Annotated Enumeration', () => {\n      const result = SchemaObjectSchema.parse({\n        oneOf: [\n          {\n            const: 'RGB',\n            title: 'Red, Green, Blue',\n            description: 'Specify colors with the red, green, and blue additive color model',\n          },\n          {\n            const: 'CMYK',\n            title: 'Cyan, Magenta, Yellow, Black',\n            description: 'Specify colors with the cyan, magenta, yellow, and black subtractive color model',\n          },\n        ],\n      })\n\n      expect(result).toEqual({\n        oneOf: [\n          {\n            const: 'RGB',\n            title: 'Red, Green, Blue',\n            description: 'Specify colors with the red, green, and blue additive color model',\n          },\n          {\n            const: 'CMYK',\n            title: 'Cyan, Magenta, Yellow, Black',\n            description: 'Specify colors with the cyan, magenta, yellow, and black subtractive color model',\n          },\n        ],\n      })\n    })\n\n    it('Model with Example', () => {\n      const result = SchemaObjectSchema.parse({\n        type: 'object',\n        properties: {\n          id: {\n            type: 'integer',\n            format: 'int64',\n          },\n          name: {\n            type: 'string',\n          },\n        },\n        required: ['name'],\n        examples: [\n          {\n            name: 'Puma',\n            id: 1,\n          },\n        ],\n      })\n\n      expect(result).toEqual({\n        type: 'object',\n        properties: {\n          id: {\n            type: 'integer',\n            format: 'int64',\n          },\n          name: {\n            type: 'string',\n          },\n        },\n        required: ['name'],\n        examples: [\n          {\n            name: 'Puma',\n            id: 1,\n          },\n        ],\n      })\n    })\n\n    it('Models with Composition', () => {\n      const result = ComponentsObjectSchema.parse({\n        schemas: {\n          ErrorModel: {\n            type: 'object',\n            required: ['message', 'code'],\n            properties: {\n              message: {\n                type: 'string',\n              },\n              code: {\n                type: 'integer',\n                minimum: 100,\n                maximum: 600,\n              },\n            },\n          },\n          ExtendedErrorModel: {\n            allOf: [\n              {\n                $ref: '#/components/schemas/ErrorModel',\n              },\n              {\n                type: 'object',\n                required: ['rootCause'],\n                properties: {\n                  rootCause: {\n                    type: 'string',\n                  },\n                },\n              },\n            ],\n          },\n        },\n      })\n\n      expect(result).toEqual({\n        schemas: {\n          ErrorModel: {\n            type: 'object',\n            required: ['message', 'code'],\n            properties: {\n              message: {\n                type: 'string',\n              },\n              code: {\n                type: 'integer',\n                minimum: 100,\n                maximum: 600,\n              },\n            },\n          },\n          ExtendedErrorModel: {\n            allOf: [\n              {\n                $ref: '#/components/schemas/ErrorModel',\n              },\n              {\n                type: 'object',\n                required: ['rootCause'],\n                properties: {\n                  rootCause: {\n                    type: 'string',\n                  },\n                },\n              },\n            ],\n          },\n        },\n      })\n    })\n\n    it('Models with Polymorphism Support', () => {\n      const result = ComponentsObjectSchema.parse({\n        schemas: {\n          Pet: {\n            type: 'object',\n            discriminator: {\n              propertyName: 'petType',\n            },\n            properties: {\n              name: {\n                type: 'string',\n              },\n              petType: {\n                type: 'string',\n              },\n            },\n            required: ['name', 'petType'],\n          },\n          Cat: {\n            description: 'A representation of a cat. Note that `Cat` will be used as the discriminating value.',\n            allOf: [\n              {\n                $ref: '#/components/schemas/Pet',\n              },\n              {\n                type: 'object',\n                properties: {\n                  huntingSkill: {\n                    type: 'string',\n                    description: 'The measured skill for hunting',\n                    default: 'lazy',\n                    enum: ['clueless', 'lazy', 'adventurous', 'aggressive'],\n                  },\n                },\n                'required': ['huntingSkill'],\n              },\n            ],\n          },\n          Dog: {\n            description: 'A representation of a dog. Note that `Dog` will be used as the discriminating value.',\n            allOf: [\n              {\n                $ref: '#/components/schemas/Pet',\n              },\n              {\n                type: 'object',\n                properties: {\n                  packSize: {\n                    type: 'integer',\n                    format: 'int32',\n                    description: 'the size of the pack the dog is from',\n                    default: 0,\n                    'minimum': 0,\n                  },\n                },\n                required: ['packSize'],\n              },\n            ],\n          },\n        },\n      })\n\n      expect(result).toEqual({\n        schemas: {\n          Pet: {\n            type: 'object',\n            discriminator: {\n              propertyName: 'petType',\n            },\n            properties: {\n              name: {\n                type: 'string',\n              },\n              petType: {\n                type: 'string',\n              },\n            },\n            required: ['name', 'petType'],\n          },\n          Cat: {\n            description: 'A representation of a cat. Note that `Cat` will be used as the discriminating value.',\n            allOf: [\n              {\n                $ref: '#/components/schemas/Pet',\n              },\n              {\n                type: 'object',\n                properties: {\n                  huntingSkill: {\n                    type: 'string',\n                    description: 'The measured skill for hunting',\n                    default: 'lazy',\n                    enum: ['clueless', 'lazy', 'adventurous', 'aggressive'],\n                  },\n                },\n                'required': ['huntingSkill'],\n              },\n            ],\n          },\n          Dog: {\n            description: 'A representation of a dog. Note that `Dog` will be used as the discriminating value.',\n            allOf: [\n              {\n                $ref: '#/components/schemas/Pet',\n              },\n              {\n                type: 'object',\n                properties: {\n                  packSize: {\n                    type: 'integer',\n                    format: 'int32',\n                    description: 'the size of the pack the dog is from',\n                    default: 0,\n                    'minimum': 0,\n                  },\n                },\n                required: ['packSize'],\n              },\n            ],\n          },\n        },\n      })\n    })\n\n    it('Generic Data Structure Model', () => {\n      const result = ComponentsObjectSchema.parse({\n        schemas: {\n          genericArrayComponent: {\n            $id: 'fully_generic_array',\n            type: 'array',\n            items: {\n              $dynamicRef: '#generic-array',\n            },\n            $defs: {\n              allowAll: {\n                $dynamicAnchor: 'generic-array',\n              },\n            },\n          },\n          numberArray: {\n            $id: 'array_of_numbers',\n            $ref: 'fully_generic_array',\n            $defs: {\n              numbersOnly: {\n                '$dynamicAnchor': 'generic-array',\n                'type': 'number',\n              },\n            },\n          },\n          stringArray: {\n            $id: 'array_of_strings',\n            $ref: 'fully_generic_array',\n            $defs: {\n              stringsOnly: {\n                $dynamicAnchor: 'generic-array',\n                type: 'string',\n              },\n            },\n          },\n          objWithTypedArray: {\n            $id: 'obj_with_typed_array',\n            type: 'object',\n            required: ['dataType', 'data'],\n            properties: {\n              dataType: {\n                enum: ['string', 'number'],\n              },\n            },\n            oneOf: [\n              {\n                properties: {\n                  dataType: { const: 'string' },\n                  data: { $ref: 'array_of_strings' },\n                },\n              },\n              {\n                properties: {\n                  dataType: { const: 'number' },\n                  data: { $ref: 'array_of_numbers' },\n                },\n              },\n            ],\n          },\n        },\n      })\n\n      expect(result).toEqual({\n        schemas: {\n          genericArrayComponent: {\n            $id: 'fully_generic_array',\n            type: 'array',\n            items: {\n              $dynamicRef: '#generic-array',\n            },\n            $defs: {\n              allowAll: {\n                $dynamicAnchor: 'generic-array',\n              },\n            },\n          },\n          numberArray: {\n            $id: 'array_of_numbers',\n            $ref: 'fully_generic_array',\n            $defs: {\n              numbersOnly: {\n                '$dynamicAnchor': 'generic-array',\n                'type': 'number',\n              },\n            },\n          },\n          stringArray: {\n            $id: 'array_of_strings',\n            $ref: 'fully_generic_array',\n            $defs: {\n              stringsOnly: {\n                $dynamicAnchor: 'generic-array',\n                type: 'string',\n              },\n            },\n          },\n          objWithTypedArray: {\n            $id: 'obj_with_typed_array',\n            type: 'object',\n            required: ['dataType', 'data'],\n            properties: {\n              dataType: {\n                enum: ['string', 'number'],\n              },\n            },\n            oneOf: [\n              {\n                properties: {\n                  dataType: { const: 'string' },\n                  data: { $ref: 'array_of_strings' },\n                },\n              },\n              {\n                properties: {\n                  dataType: { const: 'number' },\n                  data: { $ref: 'array_of_numbers' },\n                },\n              },\n            ],\n          },\n        },\n      })\n    })\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
