{
  "version": 3,
  "sources": ["../../../src/schemas/extensions/x-code-samples.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\nimport { XCodeSamplesSchema } from './x-code-samples'\n\ndescribe('XCodeSamplesSchema', () => {\n  const sampleCode = {\n    lang: 'javascript',\n    label: 'JavaScript',\n    source: 'console.log(\"Hello, world!\");',\n  }\n\n  it('allows a single code sample', () => {\n    const result = XCodeSamplesSchema.parse({\n      'x-codeSamples': [\n        {\n          lang: 'javascript',\n          label: 'JavaScript',\n          source: 'console.log(\"Hello, world!\");',\n        },\n      ],\n    })\n\n    expect(result).toEqual({\n      'x-codeSamples': [{ lang: 'javascript', label: 'JavaScript', source: 'console.log(\"Hello, world!\");' }],\n    })\n  })\n\n  it('allows multiple code samples', () => {\n    const result = XCodeSamplesSchema.parse({\n      'x-codeSamples': [\n        {\n          lang: 'javascript',\n          label: 'JavaScript',\n          source: 'console.log(\"Hello, world!\");',\n        },\n      ],\n    })\n\n    expect(result).toEqual({\n      'x-codeSamples': [{ lang: 'javascript', label: 'JavaScript', source: 'console.log(\"Hello, world!\");' }],\n    })\n  })\n\n  it('supports x-code-samples extension', () => {\n    const result = XCodeSamplesSchema.parse({\n      'x-code-samples': [sampleCode],\n    })\n\n    expect(result).toEqual({\n      'x-code-samples': [sampleCode],\n      'x-codeSamples': undefined,\n      'x-custom-examples': undefined,\n    })\n  })\n\n  it('supports x-custom-examples extension', () => {\n    const result = XCodeSamplesSchema.parse({\n      'x-custom-examples': [sampleCode],\n    })\n\n    expect(result).toEqual({\n      'x-custom-examples': [sampleCode],\n      'x-codeSamples': undefined,\n      'x-code-samples': undefined,\n    })\n  })\n\n  it('supports multiple extension types simultaneously', () => {\n    const pythonSample = {\n      lang: 'python',\n      label: 'Python',\n      source: 'print(\"Hello, world!\")',\n    }\n\n    const result = XCodeSamplesSchema.parse({\n      'x-codeSamples': [sampleCode],\n      'x-code-samples': [pythonSample],\n      'x-custom-examples': [sampleCode, pythonSample],\n    })\n\n    expect(result).toEqual({\n      'x-codeSamples': [sampleCode],\n      'x-code-samples': [pythonSample],\n      'x-custom-examples': [sampleCode, pythonSample],\n    })\n  })\n\n  it('defaults all extensions to undefined when empty', () => {\n    expect(XCodeSamplesSchema.parse({})).toEqual({\n      'x-codeSamples': undefined,\n      'x-code-samples': undefined,\n      'x-custom-examples': undefined,\n    })\n  })\n})\n"],
  "mappings": "AAAA,SAAS,UAAU,QAAQ,UAAU;AACrC,SAAS,0BAA0B;AAEnC,SAAS,sBAAsB,MAAM;AACnC,QAAM,aAAa;AAAA,IACjB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,EACV;AAEA,KAAG,+BAA+B,MAAM;AACtC,UAAM,SAAS,mBAAmB,MAAM;AAAA,MACtC,iBAAiB;AAAA,QACf;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,UACP,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF,CAAC;AAED,WAAO,MAAM,EAAE,QAAQ;AAAA,MACrB,iBAAiB,CAAC,EAAE,MAAM,cAAc,OAAO,cAAc,QAAQ,gCAAgC,CAAC;AAAA,IACxG,CAAC;AAAA,EACH,CAAC;AAED,KAAG,gCAAgC,MAAM;AACvC,UAAM,SAAS,mBAAmB,MAAM;AAAA,MACtC,iBAAiB;AAAA,QACf;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,UACP,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF,CAAC;AAED,WAAO,MAAM,EAAE,QAAQ;AAAA,MACrB,iBAAiB,CAAC,EAAE,MAAM,cAAc,OAAO,cAAc,QAAQ,gCAAgC,CAAC;AAAA,IACxG,CAAC;AAAA,EACH,CAAC;AAED,KAAG,qCAAqC,MAAM;AAC5C,UAAM,SAAS,mBAAmB,MAAM;AAAA,MACtC,kBAAkB,CAAC,UAAU;AAAA,IAC/B,CAAC;AAED,WAAO,MAAM,EAAE,QAAQ;AAAA,MACrB,kBAAkB,CAAC,UAAU;AAAA,MAC7B,iBAAiB;AAAA,MACjB,qBAAqB;AAAA,IACvB,CAAC;AAAA,EACH,CAAC;AAED,KAAG,wCAAwC,MAAM;AAC/C,UAAM,SAAS,mBAAmB,MAAM;AAAA,MACtC,qBAAqB,CAAC,UAAU;AAAA,IAClC,CAAC;AAED,WAAO,MAAM,EAAE,QAAQ;AAAA,MACrB,qBAAqB,CAAC,UAAU;AAAA,MAChC,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACpB,CAAC;AAAA,EACH,CAAC;AAED,KAAG,oDAAoD,MAAM;AAC3D,UAAM,eAAe;AAAA,MACnB,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAEA,UAAM,SAAS,mBAAmB,MAAM;AAAA,MACtC,iBAAiB,CAAC,UAAU;AAAA,MAC5B,kBAAkB,CAAC,YAAY;AAAA,MAC/B,qBAAqB,CAAC,YAAY,YAAY;AAAA,IAChD,CAAC;AAED,WAAO,MAAM,EAAE,QAAQ;AAAA,MACrB,iBAAiB,CAAC,UAAU;AAAA,MAC5B,kBAAkB,CAAC,YAAY;AAAA,MAC/B,qBAAqB,CAAC,YAAY,YAAY;AAAA,IAChD,CAAC;AAAA,EACH,CAAC;AAED,KAAG,mDAAmD,MAAM;AAC1D,WAAO,mBAAmB,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ;AAAA,MAC3C,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,MAClB,qBAAqB;AAAA,IACvB,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
