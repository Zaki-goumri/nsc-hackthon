{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/processed/schema-object.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\nimport { SchemaObjectSchema } from './schema-object'\n\ndescribe('schema-object', () => {\n  describe('basic validation', () => {\n    it('validates a simple string schema', () => {\n      const schema = {\n        type: 'string',\n        minLength: 1,\n        maxLength: 100,\n        pattern: '^[a-zA-Z]+$',\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates a complex object schema', () => {\n      const schema = {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            format: 'uuid',\n          },\n          name: {\n            type: 'string',\n            minLength: 1,\n          },\n          age: {\n            type: 'integer',\n            minimum: 0,\n            maximum: 150,\n          },\n          tags: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n            uniqueItems: true,\n          },\n        },\n        required: ['id', 'name'],\n        additionalProperties: false,\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates array type with tuple validation', () => {\n      const schema = {\n        type: 'array',\n        items: {\n          type: ['string', 'number'],\n        },\n        minItems: 2,\n        maxItems: 5,\n        uniqueItems: true,\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates schema with null type', () => {\n      const schema = {\n        type: ['string', 'null'],\n        description: 'A nullable string field',\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n  })\n\n  describe('format compatibility', () => {\n    it('validates string formats with string type', () => {\n      const stringFormats = [\n        'date',\n        'date-time',\n        'duration',\n        'password',\n        'byte',\n        'binary',\n        'email',\n        'uuid',\n        'uri',\n        'uri-reference',\n        'uri-template',\n        'hostname',\n        'ipv4',\n        'ipv6',\n      ]\n\n      stringFormats.forEach((format) => {\n        const schema = {\n          type: 'string',\n          format,\n        }\n        const result = SchemaObjectSchema.safeParse(schema)\n        expect(result.success).toBe(true)\n      })\n    })\n\n    it('validates number formats with numeric types', () => {\n      const numberFormats = ['float', 'double', 'int32', 'int64']\n\n      numberFormats.forEach((format) => {\n        const schema = {\n          type: 'number',\n          format,\n        }\n        const result = SchemaObjectSchema.safeParse(schema)\n        expect(result.success).toBe(true)\n      })\n    })\n  })\n\n  describe('discriminator validation', () => {\n    it('validates discriminator with oneOf', () => {\n      const schema = {\n        oneOf: [\n          { type: 'object', properties: { type: { const: 'dog' } } },\n          { type: 'object', properties: { type: { const: 'cat' } } },\n        ],\n        discriminator: {\n          propertyName: 'type',\n        },\n        required: ['type'],\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates discriminator with anyOf', () => {\n      const schema = {\n        anyOf: [\n          { type: 'object', properties: { type: { const: 'dog' } } },\n          { type: 'object', properties: { type: { const: 'cat' } } },\n        ],\n        discriminator: {\n          propertyName: 'type',\n        },\n        required: ['type'],\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates discriminator with mapping', () => {\n      const schema = {\n        oneOf: [\n          { type: 'object', properties: { type: { const: 'dog' } } },\n          { type: 'object', properties: { type: { const: 'cat' } } },\n        ],\n        discriminator: {\n          propertyName: 'type',\n          mapping: {\n            dog: '#/components/schemas/Dog',\n            cat: '#/components/schemas/Cat',\n          },\n        },\n        required: ['type'],\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n  })\n\n  describe('metadata validation', () => {\n    it('validates vendor extensions', () => {\n      const schema = {\n        type: 'string',\n        'x-custom-extension': true,\n        'x-another-extension': {\n          nested: 'value',\n        },\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n  })\n\n  describe('format validation', () => {\n    it('validates date format', () => {\n      const schema = {\n        type: 'string',\n        format: 'date',\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates email format', () => {\n      const schema = {\n        type: 'string',\n        format: 'email',\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates uuid format', () => {\n      const schema = {\n        type: 'string',\n        format: 'uuid',\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates int32 format', () => {\n      const schema = {\n        type: 'integer',\n        format: 'int32',\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n  })\n\n  describe('OpenAPI extensions', () => {\n    it('validates xml configuration', () => {\n      const schema = {\n        type: 'object',\n        xml: {\n          name: 'Pet',\n          namespace: 'http://example.com/schema',\n          prefix: 'p',\n          attribute: true,\n          wrapped: true,\n        },\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates external documentation', () => {\n      const schema = {\n        type: 'object',\n        externalDocs: {\n          description: 'Find more info here',\n          url: 'https://example.com/docs',\n        },\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates custom x- extensions', () => {\n      const schema = {\n        type: 'string',\n        'x-custom-extension': {\n          someValue: 123,\n        },\n        'x-another-extension': true,\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n  })\n\n  describe('schema composition', () => {\n    it('validates allOf composition', () => {\n      const schema = {\n        allOf: [\n          { type: 'object', properties: { name: { type: 'string' } } },\n          { type: 'object', properties: { age: { type: 'integer' } } },\n        ],\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates oneOf with discriminator', () => {\n      const schema = {\n        oneOf: [\n          { type: 'object', properties: { type: { const: 'dog' }, bark: { type: 'boolean' } } },\n          { type: 'object', properties: { type: { const: 'cat' }, meow: { type: 'boolean' } } },\n        ],\n        discriminator: {\n          propertyName: 'type',\n        },\n        required: ['type'],\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates anyOf with multiple types', () => {\n      const schema = {\n        anyOf: [{ type: 'string', format: 'email' }, { type: 'string', format: 'uri' }, { type: 'null' }],\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n\n    it('validates not with complex schema', () => {\n      const schema = {\n        not: {\n          type: 'object',\n          properties: {\n            forbidden: { type: 'boolean', const: true },\n            restricted: { type: 'string', enum: ['no', 'nope'] },\n          },\n          required: ['forbidden'],\n        },\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true)\n    })\n  })\n\n  describe('validation errors', () => {\n    it('rejects invalid type values', () => {\n      const schema = { type: 'invalid' }\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(false)\n      if (!result.success) {\n        expect(result.error.issues[0].path).toContain('type')\n      }\n    })\n\n    it('rejects invalid required fields', () => {\n      const schema = {\n        type: 'object',\n        properties: {\n          name: { type: 'string' },\n        },\n        required: ['age'], // age is not defined in properties\n      }\n\n      const result = SchemaObjectSchema.safeParse(schema)\n      expect(result.success).toBe(true) // OpenAPI allows this as properties might be defined elsewhere\n    })\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
