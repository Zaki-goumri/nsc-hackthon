{
  "version": 3,
  "sources": ["../../../src/schemas/extensions/x-use-pkce.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\nimport { XusePkceSchema } from './x-use-pkce'\n\ndescribe('XusePkce', () => {\n  it('allows SHA-256 value', () => {\n    const result = XusePkceSchema.parse({\n      'x-usePkce': 'SHA-256',\n    })\n    expect(result).toEqual({ 'x-usePkce': 'SHA-256' })\n  })\n\n  it('allows plain value', () => {\n    const result = XusePkceSchema.parse({\n      'x-usePkce': 'plain',\n    })\n    expect(result).toEqual({ 'x-usePkce': 'plain' })\n  })\n\n  it('allows no value', () => {\n    const result = XusePkceSchema.parse({\n      'x-usePkce': 'no',\n    })\n    expect(result).toEqual({ 'x-usePkce': 'no' })\n  })\n\n  it('defaults to \"no\" when empty', () => {\n    const result = XusePkceSchema.parse({})\n    expect(result).toEqual({ 'x-usePkce': 'no' })\n  })\n\n  it('throws error when invalid value provided', () => {\n    expect(() =>\n      XusePkceSchema.parse({\n        'x-usePkce': 'invalid',\n      }),\n    ).toThrow()\n  })\n})\n"],
  "mappings": "AAAA,SAAS,UAAU,QAAQ,UAAU;AACrC,SAAS,sBAAsB;AAE/B,SAAS,YAAY,MAAM;AACzB,KAAG,wBAAwB,MAAM;AAC/B,UAAM,SAAS,eAAe,MAAM;AAAA,MAClC,aAAa;AAAA,IACf,CAAC;AACD,WAAO,MAAM,EAAE,QAAQ,EAAE,aAAa,UAAU,CAAC;AAAA,EACnD,CAAC;AAED,KAAG,sBAAsB,MAAM;AAC7B,UAAM,SAAS,eAAe,MAAM;AAAA,MAClC,aAAa;AAAA,IACf,CAAC;AACD,WAAO,MAAM,EAAE,QAAQ,EAAE,aAAa,QAAQ,CAAC;AAAA,EACjD,CAAC;AAED,KAAG,mBAAmB,MAAM;AAC1B,UAAM,SAAS,eAAe,MAAM;AAAA,MAClC,aAAa;AAAA,IACf,CAAC;AACD,WAAO,MAAM,EAAE,QAAQ,EAAE,aAAa,KAAK,CAAC;AAAA,EAC9C,CAAC;AAED,KAAG,+BAA+B,MAAM;AACtC,UAAM,SAAS,eAAe,MAAM,CAAC,CAAC;AACtC,WAAO,MAAM,EAAE,QAAQ,EAAE,aAAa,KAAK,CAAC;AAAA,EAC9C,CAAC;AAED,KAAG,4CAA4C,MAAM;AACnD;AAAA,MAAO,MACL,eAAe,MAAM;AAAA,QACnB,aAAa;AAAA,MACf,CAAC;AAAA,IACH,EAAE,QAAQ;AAAA,EACZ,CAAC;AACH,CAAC;",
  "names": []
}
