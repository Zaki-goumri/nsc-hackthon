{
  "version": 3,
  "sources": ["../../../src/schemas/extensions/x-additional-properties-name.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\nimport { XAdditionalPropertiesNameSchema } from './x-additional-properties-name'\n\ndescribe('XAdditionalPropertiesNameSchema', () => {\n  it('accepts a valid additional properties name', () => {\n    const result = XAdditionalPropertiesNameSchema.parse({\n      'x-additionalPropertiesName': 'customField',\n    })\n\n    expect(result).toEqual({\n      'x-additionalPropertiesName': 'customField',\n    })\n  })\n\n  it('defaults to undefined when empty', () => {\n    const result = XAdditionalPropertiesNameSchema.parse({})\n    expect(result).toEqual({\n      'x-additionalPropertiesName': undefined,\n    })\n  })\n\n  it('defaults to undefined when invalid type is provided', () => {\n    const result = XAdditionalPropertiesNameSchema.parse({\n      'x-additionalPropertiesName': 123, // Invalid type - should be string\n    })\n    expect(result).toEqual({\n      'x-additionalPropertiesName': undefined,\n    })\n  })\n})\n"],
  "mappings": "AAAA,SAAS,UAAU,QAAQ,UAAU;AACrC,SAAS,uCAAuC;AAEhD,SAAS,mCAAmC,MAAM;AAChD,KAAG,8CAA8C,MAAM;AACrD,UAAM,SAAS,gCAAgC,MAAM;AAAA,MACnD,8BAA8B;AAAA,IAChC,CAAC;AAED,WAAO,MAAM,EAAE,QAAQ;AAAA,MACrB,8BAA8B;AAAA,IAChC,CAAC;AAAA,EACH,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,SAAS,gCAAgC,MAAM,CAAC,CAAC;AACvD,WAAO,MAAM,EAAE,QAAQ;AAAA,MACrB,8BAA8B;AAAA,IAChC,CAAC;AAAA,EACH,CAAC;AAED,KAAG,uDAAuD,MAAM;AAC9D,UAAM,SAAS,gCAAgC,MAAM;AAAA,MACnD,8BAA8B;AAAA;AAAA,IAChC,CAAC;AACD,WAAO,MAAM,EAAE,QAAQ;AAAA,MACrB,8BAA8B;AAAA,IAChC,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
