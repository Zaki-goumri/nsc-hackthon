{
  "version": 3,
  "sources": ["../../src/utils/nanoid.test.ts"],
  "sourcesContent": ["import { describe, it, expect } from 'vitest'\nimport { nanoidSchema, type Nanoid } from './nanoid'\nimport { z } from 'zod'\n\ndescribe('nanoidSchema', () => {\n  it('should generate a string with minimum length of 7 characters when no value is provided', () => {\n    const result = nanoidSchema.parse(undefined)\n    expect(typeof result).toBe('string')\n    expect(result.length).toBeGreaterThanOrEqual(7)\n  })\n\n  it('should accept valid strings with length >= 7', () => {\n    const validString = '1234567'\n    const result = nanoidSchema.parse(validString)\n    expect(result).toBe(validString)\n  })\n\n  it('should reject strings shorter than 7 characters', () => {\n    const invalidString = '123456'\n    expect(() => nanoidSchema.parse(invalidString)).toThrow(z.ZodError)\n  })\n\n  it('should generate different IDs for multiple calls', () => {\n    const id1 = nanoidSchema.parse(undefined)\n    const id2 = nanoidSchema.parse(undefined)\n    expect(id1).not.toBe(id2)\n  })\n\n  it('should properly type the generated ID as Nanoid', () => {\n    const id: Nanoid = nanoidSchema.parse(undefined)\n    expect(typeof id).toBe('string')\n  })\n})\n"],
  "mappings": "AAAA,SAAS,UAAU,IAAI,cAAc;AACrC,SAAS,oBAAiC;AAC1C,SAAS,SAAS;AAElB,SAAS,gBAAgB,MAAM;AAC7B,KAAG,0FAA0F,MAAM;AACjG,UAAM,SAAS,aAAa,MAAM,MAAS;AAC3C,WAAO,OAAO,MAAM,EAAE,KAAK,QAAQ;AACnC,WAAO,OAAO,MAAM,EAAE,uBAAuB,CAAC;AAAA,EAChD,CAAC;AAED,KAAG,gDAAgD,MAAM;AACvD,UAAM,cAAc;AACpB,UAAM,SAAS,aAAa,MAAM,WAAW;AAC7C,WAAO,MAAM,EAAE,KAAK,WAAW;AAAA,EACjC,CAAC;AAED,KAAG,mDAAmD,MAAM;AAC1D,UAAM,gBAAgB;AACtB,WAAO,MAAM,aAAa,MAAM,aAAa,CAAC,EAAE,QAAQ,EAAE,QAAQ;AAAA,EACpE,CAAC;AAED,KAAG,oDAAoD,MAAM;AAC3D,UAAM,MAAM,aAAa,MAAM,MAAS;AACxC,UAAM,MAAM,aAAa,MAAM,MAAS;AACxC,WAAO,GAAG,EAAE,IAAI,KAAK,GAAG;AAAA,EAC1B,CAAC;AAED,KAAG,mDAAmD,MAAM;AAC1D,UAAM,KAAa,aAAa,MAAM,MAAS;AAC/C,WAAO,OAAO,EAAE,EAAE,KAAK,QAAQ;AAAA,EACjC,CAAC;AACH,CAAC;",
  "names": []
}
