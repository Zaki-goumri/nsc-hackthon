{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/compliance/parameter-object.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\n\nimport { ParameterObjectSchema } from '../unprocessed/parameter-object'\n\ndescribe('parameter-object', () => {\n  describe('ParameterObjectSchema', () => {\n    // https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#parameter-object-examples\n    describe('Parameter Object Examples', () => {\n      it('A header parameter with an array of 64-bit integer numbers', () => {\n        const result = ParameterObjectSchema.parse({\n          name: 'token',\n          in: 'header',\n          description: 'token to be passed as a header',\n          required: true,\n          schema: {\n            type: 'array',\n            items: {\n              type: 'integer',\n              format: 'int64',\n            },\n          },\n          style: 'simple',\n        })\n\n        expect(result).toEqual({\n          name: 'token',\n          in: 'header',\n          description: 'token to be passed as a header',\n          required: true,\n          schema: {\n            type: 'array',\n            items: {\n              type: 'integer',\n              format: 'int64',\n            },\n          },\n          style: 'simple',\n        })\n      })\n\n      it('A path parameter of a string value', () => {\n        const result = ParameterObjectSchema.parse({\n          name: 'username',\n          in: 'path',\n          description: 'username to fetch',\n          required: true,\n          schema: {\n            type: 'string',\n          },\n        })\n\n        expect(result).toEqual({\n          name: 'username',\n          in: 'path',\n          description: 'username to fetch',\n          required: true,\n          schema: {\n            type: 'string',\n          },\n        })\n      })\n\n      it('An optional query parameter of a string value, allowing multiple values by repeating the query parameter', () => {\n        const result = ParameterObjectSchema.parse({\n          name: 'id',\n          in: 'query',\n          description: 'ID of the object to fetch',\n          required: false,\n          schema: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          style: 'form',\n          explode: true,\n        })\n\n        expect(result).toEqual({\n          name: 'id',\n          in: 'query',\n          description: 'ID of the object to fetch',\n          required: false,\n          schema: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          style: 'form',\n          explode: true,\n        })\n      })\n\n      it('A free-form query parameter, allowing undefined parameters of a specific type', () => {\n        const result = ParameterObjectSchema.parse({\n          in: 'query',\n          name: 'freeForm',\n          schema: {\n            type: 'object',\n            additionalProperties: {\n              type: 'integer',\n            },\n          },\n          style: 'form',\n        })\n\n        expect(result).toEqual({\n          in: 'query',\n          name: 'freeForm',\n          schema: {\n            type: 'object',\n            additionalProperties: {\n              type: 'integer',\n            },\n          },\n          style: 'form',\n        })\n      })\n\n      it('A complex parameter using content to define serialization', () => {\n        const result = ParameterObjectSchema.parse({\n          in: 'query',\n          name: 'coordinates',\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                required: ['lat', 'long'],\n                properties: {\n                  lat: {\n                    type: 'number',\n                  },\n                  long: {\n                    type: 'number',\n                  },\n                },\n              },\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          in: 'query',\n          name: 'coordinates',\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                required: ['lat', 'long'],\n                properties: {\n                  lat: {\n                    type: 'number',\n                  },\n                  long: {\n                    type: 'number',\n                  },\n                },\n              },\n            },\n          },\n        })\n      })\n    })\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
