{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/compliance/response-object.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\n\nimport { ResponseObjectSchema } from '../unprocessed/response-object'\n\ndescribe('response-object', () => {\n  describe('ContactObjectSchema', () => {\n    // https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#response-object-examples\n    describe('Response Object Example', () => {\n      it('Response of an array of a complex type', () => {\n        const result = ResponseObjectSchema.parse({\n          description: 'A complex object array response',\n          content: {\n            'application/json': {\n              schema: {\n                type: 'array',\n                items: {\n                  $ref: '#/components/schemas/ComplexObject',\n                },\n              },\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          description: 'A complex object array response',\n          content: {\n            'application/json': {\n              schema: {\n                type: 'array',\n                items: {\n                  $ref: '#/components/schemas/ComplexObject',\n                },\n              },\n            },\n          },\n        })\n      })\n\n      it('Response with a string type', () => {\n        const result = ResponseObjectSchema.parse({\n          description: 'A simple string response',\n          content: {\n            'text/plain': {\n              schema: {\n                type: 'string',\n              },\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          description: 'A simple string response',\n          content: {\n            'text/plain': {\n              schema: {\n                type: 'string',\n              },\n            },\n          },\n        })\n      })\n\n      it('Plain text response with headers', () => {\n        const result = ResponseObjectSchema.parse({\n          description: 'A simple string response',\n          content: {\n            'text/plain': {\n              schema: {\n                type: 'string',\n              },\n              example: 'whoa!',\n            },\n          },\n          headers: {\n            'X-Rate-Limit-Limit': {\n              description: 'The number of allowed requests in the current period',\n              schema: {\n                type: 'integer',\n              },\n            },\n            'X-Rate-Limit-Remaining': {\n              description: 'The number of remaining requests in the current period',\n              schema: {\n                type: 'integer',\n              },\n            },\n            'X-Rate-Limit-Reset': {\n              description: 'The number of seconds left in the current period',\n              schema: {\n                type: 'integer',\n              },\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          description: 'A simple string response',\n          content: {\n            'text/plain': {\n              schema: {\n                type: 'string',\n              },\n              example: 'whoa!',\n            },\n          },\n          headers: {\n            'X-Rate-Limit-Limit': {\n              description: 'The number of allowed requests in the current period',\n              schema: {\n                type: 'integer',\n              },\n            },\n            'X-Rate-Limit-Remaining': {\n              description: 'The number of remaining requests in the current period',\n              schema: {\n                type: 'integer',\n              },\n            },\n            'X-Rate-Limit-Reset': {\n              description: 'The number of seconds left in the current period',\n              schema: {\n                type: 'integer',\n              },\n            },\n          },\n        })\n      })\n\n      it('Response with no return value', () => {\n        const result = ResponseObjectSchema.parse({\n          description: 'object created',\n        })\n\n        expect(result).toEqual({\n          description: 'object created',\n        })\n      })\n    })\n  })\n})\n"],
  "mappings": "AAAA,SAAS,UAAU,QAAQ,UAAU;AAErC,SAAS,4BAA4B;AAErC,SAAS,mBAAmB,MAAM;AAChC,WAAS,uBAAuB,MAAM;AAEpC,aAAS,2BAA2B,MAAM;AACxC,SAAG,0CAA0C,MAAM;AACjD,cAAM,SAAS,qBAAqB,MAAM;AAAA,UACxC,aAAa;AAAA,UACb,SAAS;AAAA,YACP,oBAAoB;AAAA,cAClB,QAAQ;AAAA,gBACN,MAAM;AAAA,gBACN,OAAO;AAAA,kBACL,MAAM;AAAA,gBACR;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAED,eAAO,MAAM,EAAE,QAAQ;AAAA,UACrB,aAAa;AAAA,UACb,SAAS;AAAA,YACP,oBAAoB;AAAA,cAClB,QAAQ;AAAA,gBACN,MAAM;AAAA,gBACN,OAAO;AAAA,kBACL,MAAM;AAAA,gBACR;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAED,SAAG,+BAA+B,MAAM;AACtC,cAAM,SAAS,qBAAqB,MAAM;AAAA,UACxC,aAAa;AAAA,UACb,SAAS;AAAA,YACP,cAAc;AAAA,cACZ,QAAQ;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAED,eAAO,MAAM,EAAE,QAAQ;AAAA,UACrB,aAAa;AAAA,UACb,SAAS;AAAA,YACP,cAAc;AAAA,cACZ,QAAQ;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAED,SAAG,oCAAoC,MAAM;AAC3C,cAAM,SAAS,qBAAqB,MAAM;AAAA,UACxC,aAAa;AAAA,UACb,SAAS;AAAA,YACP,cAAc;AAAA,cACZ,QAAQ;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA,SAAS;AAAA,YACX;AAAA,UACF;AAAA,UACA,SAAS;AAAA,YACP,sBAAsB;AAAA,cACpB,aAAa;AAAA,cACb,QAAQ;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,0BAA0B;AAAA,cACxB,aAAa;AAAA,cACb,QAAQ;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,sBAAsB;AAAA,cACpB,aAAa;AAAA,cACb,QAAQ;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAED,eAAO,MAAM,EAAE,QAAQ;AAAA,UACrB,aAAa;AAAA,UACb,SAAS;AAAA,YACP,cAAc;AAAA,cACZ,QAAQ;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,cACA,SAAS;AAAA,YACX;AAAA,UACF;AAAA,UACA,SAAS;AAAA,YACP,sBAAsB;AAAA,cACpB,aAAa;AAAA,cACb,QAAQ;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,0BAA0B;AAAA,cACxB,aAAa;AAAA,cACb,QAAQ;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,YACA,sBAAsB;AAAA,cACpB,aAAa;AAAA,cACb,QAAQ;AAAA,gBACN,MAAM;AAAA,cACR;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAED,SAAG,iCAAiC,MAAM;AACxC,cAAM,SAAS,qBAAqB,MAAM;AAAA,UACxC,aAAa;AAAA,QACf,CAAC;AAED,eAAO,MAAM,EAAE,QAAQ;AAAA,UACrB,aAAa;AAAA,QACf,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
