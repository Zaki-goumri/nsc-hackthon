{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/compliance/operation-object.test.ts"],
  "sourcesContent": ["import { describe, expect, it } from 'vitest'\nimport { OperationObjectSchema } from '../unprocessed/operation-object'\n\ndescribe('operation-object', () => {\n  describe('OperationObjectSchema', () => {\n    // https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#operation-object-example\n    it('Operation Object Example', () => {\n      const result = OperationObjectSchema.parse({\n        tags: ['pet'],\n        summary: 'Updates a pet in the store with form data',\n        operationId: 'updatePetWithForm',\n        parameters: [\n          {\n            name: 'petId',\n            in: 'path',\n            description: 'ID of pet that needs to be updated',\n            required: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n        requestBody: {\n          content: {\n            'application/x-www-form-urlencoded': {\n              schema: {\n                type: 'object',\n                properties: {\n                  name: {\n                    description: 'Updated name of the pet',\n                    type: 'string',\n                  },\n                  status: {\n                    description: 'Updated status of the pet',\n                    type: 'string',\n                  },\n                },\n                required: ['status'],\n              },\n            },\n          },\n        },\n        responses: {\n          200: {\n            description: 'Pet updated.',\n            content: {\n              'application/json': {},\n              'application/xml': {},\n            },\n          },\n          405: {\n            description: 'Method Not Allowed',\n            content: {\n              'application/json': {},\n              'application/xml': {},\n            },\n          },\n        },\n        security: [\n          {\n            petstore_auth: ['write:pets', 'read:pets'],\n          },\n        ],\n      })\n      expect(result).toEqual({\n        tags: ['pet'],\n        summary: 'Updates a pet in the store with form data',\n        operationId: 'updatePetWithForm',\n        parameters: [\n          {\n            name: 'petId',\n            in: 'path',\n            description: 'ID of pet that needs to be updated',\n            required: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n        requestBody: {\n          content: {\n            'application/x-www-form-urlencoded': {\n              schema: {\n                type: 'object',\n                properties: {\n                  name: {\n                    description: 'Updated name of the pet',\n                    type: 'string',\n                  },\n                  status: {\n                    description: 'Updated status of the pet',\n                    type: 'string',\n                  },\n                },\n                required: ['status'],\n              },\n            },\n          },\n        },\n        responses: {\n          200: {\n            description: 'Pet updated.',\n            content: {\n              'application/json': {},\n              'application/xml': {},\n            },\n          },\n          405: {\n            description: 'Method Not Allowed',\n            content: {\n              'application/json': {},\n              'application/xml': {},\n            },\n          },\n        },\n        security: [\n          {\n            petstore_auth: ['write:pets', 'read:pets'],\n          },\n        ],\n      })\n    })\n\n    describe('Considerations for File Uploads', () => {\n      it('PNG image as a binary file', () => {\n        const result = OperationObjectSchema.parse({\n          requestBody: {\n            content: {\n              'image/png': {},\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          requestBody: {\n            content: {\n              'image/png': {},\n            },\n          },\n        })\n      })\n\n      it('arbitrary binary file', () => {\n        const result = OperationObjectSchema.parse({\n          requestBody: {\n            content: {\n              'application/octet-stream': {},\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          requestBody: {\n            content: {\n              'application/octet-stream': {},\n            },\n          },\n        })\n      })\n\n      it('arbitrary JSON without constraints beyond being syntactically valid', () => {\n        const result = OperationObjectSchema.parse({\n          requestBody: {\n            content: {\n              'application/json': {},\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          requestBody: {\n            content: {\n              'application/json': {},\n            },\n          },\n        })\n      })\n    })\n\n    describe('Encoding the x-www-form-urlencoded Media Type', () => {\n      it(`When there is no encoding field, the serialization strategy is based on the Encoding Object's default values`, () => {\n        const result = OperationObjectSchema.parse({\n          requestBody: {\n            content: {\n              'application/x-www-form-urlencoded': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string',\n                      format: 'uuid',\n                    },\n                    address: {\n                      // complex types are stringified to support RFC 1866\n                      type: 'object',\n                      properties: {},\n                    },\n                  },\n                },\n              },\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          requestBody: {\n            content: {\n              'application/x-www-form-urlencoded': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string',\n                      format: 'uuid',\n                    },\n                    address: {\n                      // complex types are stringified to support RFC 1866\n                      type: 'object',\n                      properties: {},\n                    },\n                  },\n                },\n              },\n            },\n          },\n        })\n      })\n\n      it('Note that application/x-www-form-urlencoded is a text format, which requires base64-encoding any binary data', () => {\n        const result = OperationObjectSchema.parse({\n          requestBody: {\n            content: {\n              'application/x-www-form-urlencoded': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    name: {\n                      type: 'string',\n                    },\n                    icon: {\n                      // The default with \"contentEncoding\" is application/octet-stream,\n                      // so we need to set image media type(s) in the Encoding Object.\n                      type: 'string',\n                      contentEncoding: 'base64url',\n                    },\n                  },\n                },\n              },\n            },\n            encoding: {\n              icon: {\n                contentType: 'image/png, image/jpeg',\n              },\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          requestBody: {\n            content: {\n              'application/x-www-form-urlencoded': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    name: {\n                      type: 'string',\n                    },\n                    icon: {\n                      // The default with \"contentEncoding\" is application/octet-stream,\n                      // so we need to set image media type(s) in the Encoding Object.\n                      type: 'string',\n                      contentEncoding: 'base64url',\n                    },\n                  },\n                },\n              },\n            },\n            encoding: {\n              icon: {\n                contentType: 'image/png, image/jpeg',\n              },\n            },\n          },\n        })\n      })\n\n      it('Example: Basic Multipart Form', () => {\n        const result = OperationObjectSchema.parse({\n          requestBody: {\n            content: {\n              'multipart/form-data': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      // default for primitives without a special format is text/plain\n                      type: 'string',\n                      format: 'uuid',\n                    },\n                    profileImage: {\n                      // default for string with binary format is `application/octet-stream`\n                      type: 'string',\n                      format: 'binary',\n                    },\n                    addresses: {\n                      // default for arrays is based on the type in the `items`\n                      // subschema, which is an object, so `application/json`\n                      type: 'array',\n                      items: {\n                        $ref: '#/components/schemas/Address',\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          requestBody: {\n            content: {\n              'multipart/form-data': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      // default for primitives without a special format is text/plain\n                      type: 'string',\n                      format: 'uuid',\n                    },\n                    profileImage: {\n                      // default for string with binary format is `application/octet-stream`\n                      type: 'string',\n                      format: 'binary',\n                    },\n                    addresses: {\n                      // default for arrays is based on the type in the `items`\n                      // subschema, which is an object, so `application/json`\n                      type: 'array',\n                      items: {\n                        $ref: '#/components/schemas/Address',\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        })\n      })\n\n      it('Example: Multipart Form with Encoding Objects', () => {\n        const result = OperationObjectSchema.parse({\n          requestBody: {\n            content: {\n              'multipart/form-data': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string',\n                      format: 'uuid',\n                    },\n                    addresses: {\n                      description: 'addresses in XML format',\n                      type: 'array',\n                      items: {\n                        $ref: '#/components/schemas/Address',\n                      },\n                    },\n                    profileImage: {\n                      type: 'string',\n                      format: 'binary',\n                    },\n                  },\n                },\n                encoding: {\n                  addresses: {\n                    contentType: 'application/xml; charset=utf-8',\n                  },\n                  profileImage: {\n                    contentType: 'image/png, image/jpeg',\n                    headers: {\n                      'X-Rate-Limit-Limit': {\n                        description: 'The number of allowed requests in the current period',\n                        schema: {\n                          type: 'integer',\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          requestBody: {\n            content: {\n              'multipart/form-data': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    id: {\n                      type: 'string',\n                      format: 'uuid',\n                    },\n                    addresses: {\n                      description: 'addresses in XML format',\n                      type: 'array',\n                      items: {\n                        $ref: '#/components/schemas/Address',\n                      },\n                    },\n                    profileImage: {\n                      type: 'string',\n                      format: 'binary',\n                    },\n                  },\n                },\n                encoding: {\n                  addresses: {\n                    contentType: 'application/xml; charset=utf-8',\n                  },\n                  profileImage: {\n                    contentType: 'image/png, image/jpeg',\n                    headers: {\n                      'X-Rate-Limit-Limit': {\n                        description: 'The number of allowed requests in the current period',\n                        schema: {\n                          type: 'integer',\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        })\n      })\n\n      it('Example: Multipart Form with Multiple Files', () => {\n        const result = OperationObjectSchema.parse({\n          requestBody: {\n            content: {\n              'multipart/form-data': {\n                schema: {\n                  properties: {\n                    // The property name 'file' will be used for all files.\n                    file: {\n                      type: 'array',\n                      items: {},\n                    },\n                  },\n                },\n              },\n            },\n          },\n        })\n\n        expect(result).toEqual({\n          requestBody: {\n            content: {\n              'multipart/form-data': {\n                schema: {\n                  properties: {\n                    // The property name 'file' will be used for all files.\n                    file: {\n                      type: 'array',\n                      items: {},\n                    },\n                  },\n                },\n              },\n            },\n          },\n        })\n      })\n    })\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
